Why use JavaScript design patterns?
1) Architecture :  i.e. layout of code
2) Maintainability: ensure code can be easily improved and extended
3) Reusability: save time amd make maintaining easier

-------------------------------------------------------------------------------------------

Layout: browser will determine how much space each element takes up and where to place it.
Painting: he process of filling in pixels. It involves drawing out elements.
Compositing: browser draws element to the screen in the correct order so the page renders correctly.

--------------------------------------------------------------------------------------------
Promise: is eventual compeletion of asyn task and take executor function ith two argument
Promise.all() : accecpt an array of promises, and will attempt to fulfill all of them. 
                exits early if just 1 promise get rejected.
Promise.race() : accecpt an array of promises, but return the first promise that is settled.
                A settled promise can either be resolved or rejected.

Tip: Do you want an array of promise results? Or, 
     Do you simply want the results of the first settled promise?

---------------------------------------------------------------------------------------------


// Why you'd want to use debounce
Say you want to detect how far a user has scrolled down a page and, 
when they reach a certain point, you lazy load an image. You’d bind a scroll listener like so:

It’s common practice to use either a debounce or throttle to limit the amount of times the 
browser runs our callback function. The difference being:

Throtle: fire the callback while the action is being performed for the defined iteration time.
Debounce: fire the callback after the action has finished for the defined amount of time.

----------------------------------------------------------------------------------------------

When centering elements with CSS it’s good to be aware of the difference between block and inline level elements.
Block elements can be centered on a page with margin: auto;,
inline elements can be centered within it’s block level 
parent by setting text-align: center; on the parent.

The way you styled your link makes it more like a block element to me.
In this case I would do this:

.button {
  display: block;
  max-width: 300px;
  margin: auto;
}
max-width being necessary because block items are 100% wide by default.

___________________________________________________________________________________________
Component vs PureComponent
Practical difference
Practically, PureComponent is the same as Component in every way except that PureComponent 
already implements the shouldComponentUpdate lifecycle callback to check for shallow equality. 
If the new props being provided to PureComponent are the same as the old props, and if the new 
state is the same as the old state, then the component will not be re-rendered.
If a component always renders the exact same way given the same props and state,

then that component can be declared as a PureComponent, otherwise use Component.

___________________________________________________________________________________________
In an rough and simplified sketch, assuming the simplest possible HTTP request, no proxies and IPv4:

1. Checks link's URL part. If not empty take that URL to be feteched.
2. browser checks cache; if requested object is in cache and is fresh, skip to #9
3. browser asks OS for server's IP address
4. OS makes a DNS lookup and replies the IP address to the browser
5. browser opens a TCP connection to server (this step is much more complex with HTTPS)
6. browser sends the HTTP request through TCP connection
7. browser receives HTTP response and may close the TCP connection, or reuse it for another request
8. browser checks if the response is a redirect (3xx result status codes), authorization request (401), 
    error (4xx and 5xx), etc.; these are handled differently from normal responses (2xx)
9. if cacheable, response is stored in cache
10. browser decodes response (e.g. if it's gzipped)
11. browser determines what to do with response (e.g. is it a HTML page, is it an image, is it a sound clip?)
12. browser renders response, or offers a download dialog for unrecognized types

There are many other things happening in parallel to this (processing typed-in address, adding page to browser history,
 displaying progress to user, notifying plugins and extensions, rendering the page while it's downloading, pipelining, 
 connection tracking for keep-alive, etc.).

_________________________________________________________________________________________________

DOM selectors:

1) To select a single element using any valid CSS selector use:
When there are no elements matched it will return null.

  document.querySelector('.foo') // class selector
  document.querySelector('#foo') // id selector
  document.querySelector('div') // tag selector
  document.querySelector('[name='foo']') // attribute selector

2) To select multiple elements use:
  querySelectorAll return a static NodeList
  document.querySelectorAll('p') // selects all <p> elements

const arr = Array.from(document.querySelectorAll('p'));


querySelectorAll: return static NodeList
getElementsByTagName, getElementsByClassName: return live HTMLCollection


// Adding Elements

<a href="/home" class="active">Home</a>

steps:
const link = document.createElement('a');
link.setAttribute('href', '/home');
link.className = 'active';
link.textContent = 'Home'

document.body.appendChild(link);

// 
Object.create():  methord is used to create a new object with the specified prototype object
 and properties.


+++++++++++++++++++++++++++++
JS source code -> Parser -> AST -> Interpreter -> bytecode ->
---> optimizing compiler along with profiling data -> highly-optimized machine code

The interpreter in V8 is called Ignition

If at some point one of the assumptions turns out to be incorrect, the optimizing compiler
deoptimizes and goes back to the interpreter.

//JavaScript’s object model

[[Value]] : itself
[[Writable]]:  which determines whether the property can be reassigned to,
[[Enumerable]]:  which determines whether the property shows up in for-in loops,
[[Configurable]]:  which determines whether the property can be deleted.

const obj = {
  x: 5,
  y: 6
};

Also can find 

Property attributes for any given object and property in JavaScript by using the
Object.getOwnPropertyDescriptor API:

Object.getOwnPropertyDescriptor(obj, 'x')
{value: 5, writable: true, enumerable: true, configurable: true}

x: Object: Property Attributes
  [[value]]: 5
  [[writable]]: true,
  [[Enumrable]]: true,
  [[Configurable]]: true
y: 
  [[value]]: 6
  [[writable]]: true,
  [[Enumrable]]: true,
  [[Configurable]]: true

Object.getOwnPropertyDescriptors(obj)
  x: {value: 5, writable: true, enumerable: true, configurable: true}
  y: {value: 6, writable: true, enumerable: true, configurable: true}
  __proto__: Object

const arr = ['a', 'b'];

Object.getOwnPropertyDescriptors(arr)
  0: {value: "a", writable: true, enumerable: true, configurable: true}
  1: {value: "b", writable: true, enumerable: true, configurable: true}
  length: {value: 2, writable: true, enumerable: false, configurable: false}
  __proto__: Object

// Define a new property directly on an object, or modifies an existing property on an object,
   and returns the object.

Object.defineProperty(obj, prop, descriptor)

// V8 used to have two compilers:

fll-codegen
crankshaft